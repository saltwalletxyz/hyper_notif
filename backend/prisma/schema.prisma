generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String?         @unique // Made optional for wallet-only users
  password       String?         // Made optional for wallet-only auth
  name           String?
  walletAddress  String?         @unique
  isActive       Boolean         @default(true)
  
  // Wallet authentication fields
  isWalletUser   Boolean         @default(false) // True if user registered via wallet
  walletType     String?         // MetaMask, WalletConnect, etc.
  connectedAt    DateTime?       // When wallet was first connected
  lastLoginAt    DateTime?       // Track login activity
  
  // Hyperliquid integration
  hyperliquidAccountValue Float?  // Cache account value
  hyperliquidLastSync    DateTime? // Last data sync timestamp
  
  // Notification platform integrations
  discordUserId   String? // Discord user ID for notifications
  telegramChatId  String? // Telegram chat ID for notifications
  
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  alerts         Alert[]
  notifications  Notification[]
  portfolios     Portfolio[]
  webhooks       Webhook[]
  
  // Hyperliquid data relations
  hyperliquidPositions HyperliquidPosition[]
  hyperliquidOrders    HyperliquidOrder[]
  hyperliquidFundings  HyperliquidFunding[]
  
  // Add indexes for performance
  @@index([walletAddress])
  @@index([isWalletUser])
}

model Alert {
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name            String
  type            AlertType
  asset           String          // Coin/token symbol
  market          MarketType      @default(PERPETUAL)
  condition       AlertCondition
  value           Float           // Target value for the condition
  currentValue    Float?          // Current value when last checked
  
  isActive        Boolean         @default(true)
  triggered       Boolean         @default(false)
  lastTriggered   DateTime?
  triggerCount    Int             @default(0)
  
  notifyEmail     Boolean         @default(true)
  notifyWebhook   Boolean         @default(false)
  notifyInApp     Boolean         @default(true)
  notifyDiscord   Boolean         @default(false)
  notifyTelegram  Boolean         @default(false)
  
  metadata        Json?           // Additional configuration
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  notifications   Notification[]
  
  @@index([userId, isActive])
  @@index([asset, type])
}

model Notification {
  id            String              @id @default(cuid())
  userId        String
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  alertId       String?
  alert         Alert?              @relation(fields: [alertId], references: [id], onDelete: SetNull)
  
  type          NotificationType
  title         String
  message       String
  data          Json?
  
  isRead        Boolean             @default(false)
  readAt        DateTime?
  
  channel       NotificationChannel
  status        NotificationStatus  @default(PENDING)
  error         String?
  
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  @@index([userId, isRead])
  @@index([createdAt])
}

model Portfolio {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name            String
  totalValue      Float       @default(0)
  pnl             Float       @default(0)
  pnlPercentage   Float       @default(0)
  
  positions       Position[]
  snapshots       PortfolioSnapshot[]
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@unique([userId, name])
  @@index([userId])
}

model Position {
  id              String      @id @default(cuid())
  portfolioId     String
  portfolio       Portfolio   @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  asset           String
  market          MarketType
  side            PositionSide
  size            Float
  entryPrice      Float
  currentPrice    Float
  markPrice       Float?
  liquidationPrice Float?
  
  pnl             Float
  pnlPercentage   Float
  funding         Float       @default(0)
  
  leverage        Float?
  margin          Float?
  
  openedAt        DateTime
  closedAt        DateTime?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([portfolioId, asset])
}

model PortfolioSnapshot {
  id              String      @id @default(cuid())
  portfolioId     String
  portfolio       Portfolio   @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  totalValue      Float
  pnl             Float
  pnlPercentage   Float
  timestamp       DateTime
  
  positions       Json        // Snapshot of positions at this time
  
  createdAt       DateTime    @default(now())
  
  @@index([portfolioId, timestamp])
}

model Webhook {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name            String
  url             String
  secret          String?
  isActive        Boolean     @default(true)
  
  events          String[]    // Array of event types to send
  
  lastUsed        DateTime?
  failureCount    Int         @default(0)
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([userId])
}

model HyperliquidPosition {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  coin            String      // Asset symbol (BTC, ETH, etc.)
  szi             String      // Position size (signed)
  entryPx         String      // Entry price
  positionValue   String      // Notional value
  unrealizedPnl   String      // Current P&L
  returnOnEquity  String      // ROE percentage
  leverage        String      // Current leverage
  
  maxLeverage     String?     // Max available leverage
  liquidationPx   String?     // Liquidation price
  marginUsed      String?     // Margin used for position
  
  isActive        Boolean     @default(true)
  lastUpdated     DateTime    @default(now())
  createdAt       DateTime    @default(now())
  
  @@unique([userId, coin]) // One position per coin per user
  @@index([userId])
  @@index([coin])
}

model HyperliquidOrder {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  coin            String      // Asset symbol
  side            String      // "A" for ask/sell, "B" for bid/buy
  limitPx         String      // Limit price
  sz              String      // Order size
  oid             Int         // Order ID from Hyperliquid
  timestamp       BigInt      // Order timestamp
  origSz          String      // Original size
  
  orderType       String?     // Order type details
  reduceOnly      Boolean     @default(false)
  ioc             Boolean     @default(false) // Immediate or Cancel
  cloid           String?     // Client order ID
  
  isActive        Boolean     @default(true)
  lastUpdated     DateTime    @default(now())
  createdAt       DateTime    @default(now())
  
  @@unique([userId, oid]) // Unique order per user
  @@index([userId])
  @@index([coin])
}

model HyperliquidFunding {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  coin            String      // Asset symbol
  fundingRate     String      // Funding rate
  premium         String?     // Premium component
  fundingPayment  String      // Actual payment amount
  timestamp       BigInt      // When funding occurred
  
  createdAt       DateTime    @default(now())
  
  @@unique([userId, coin, timestamp])
  @@index([userId])
  @@index([timestamp])
}

model MarketData {
  id              String      @id @default(cuid())
  asset           String
  market          MarketType
  
  price           Float
  volume24h       Float
  high24h         Float
  low24h          Float
  change24h       Float
  changePercent24h Float
  
  fundingRate     Float?
  openInterest    Float?
  
  timestamp       DateTime
  
  @@unique([asset, market, timestamp])
  @@index([asset, market])
  @@index([timestamp])
}

enum AlertType {
  PRICE_ABOVE
  PRICE_BELOW
  PRICE_CHANGE_PERCENT
  VOLUME_SPIKE
  FUNDING_RATE
  LIQUIDATION_RISK
  ORDER_FILLED
  POSITION_PNL
  BALANCE_CHANGE
}

enum AlertCondition {
  GREATER_THAN
  LESS_THAN
  EQUALS
  CROSSES_ABOVE
  CROSSES_BELOW
}

enum MarketType {
  PERPETUAL
  SPOT
}

enum NotificationType {
  ALERT_TRIGGERED
  ORDER_UPDATE
  POSITION_UPDATE
  SYSTEM_MESSAGE
  MARKET_UPDATE
}

enum NotificationChannel {
  EMAIL
  WEBHOOK
  IN_APP
  DISCORD
  TELEGRAM
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
}

enum PositionSide {
  LONG
  SHORT
}