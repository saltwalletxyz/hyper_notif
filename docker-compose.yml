version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: hyperliquid-notify-db
    environment:
      POSTGRES_DB: hyperliquid_notify
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Optional - for caching and queues)
  redis:
    image: redis:7-alpine
    container_name: hyperliquid-notify-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hyperliquid-notify-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/hyperliquid_notify?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-secret-key-change-in-production
      HYPERLIQUID_API_URL: https://api.hyperliquid.xyz
      HYPERLIQUID_WS_URL: wss://api.hyperliquid.xyz/ws
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  # Frontend Service  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hyperliquid-notify-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_WS_URL: http://localhost:5000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm start

volumes:
  postgres_data:
  redis_data: